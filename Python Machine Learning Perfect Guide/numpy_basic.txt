import numpy as np

list1 = [1, 2, 3]
print("list1 : ", list1)
print("list1 type : ", type(list1))

array1 = np.array(list1)
print("array1 : ",  array1)
print("array1 type : ", type(array1))

array1 = np.array([1, 2, 3])
print("array1 type : ", type(array1))
print("arraya array 형태 : ", array1.shape)

array2 = np.array([[1, 2, 3], [2, 3, 4]])
print("array2 type : ", type(array2))
print("array2 array 형태 : ", array2.shape)

array3 = np.array([[1, 2, 3]])
print("array3 type : ", type(array3))
print("array3 array 형태 : ", array3.shape)

print("array1 : {:0}차원, array2 : {:1}차원, array3 {:2}차원".format(array1.ndim, array2.ndim, array3.ndim))

list2 = [1, 2, "test"]
array2 = np.array(list2)
print(array2, array2.dtype)

list3 = [1, 2, 3.0]
array3 = np.array(list3)
print(array3, array3.dtype)

array_int = np.array([1, 2, 3])
array_float = array_int.astype("float64")
print(array_float, array_float.dtype)

array_int1 = array_float.astype("int32")
print(array_int1, array_int1.dtype)

array_float1 = np.array([1.1, 2.1, 3.1])
array_int2 = array_float1.astype("int32")
print(array_int2, array_int2.dtype)

array2 = np.array([[1, 2, 3], [2, 3, 4]])

print(array2.sum())
print(array2.sum(axis = 0))
print(array2.sum(axis = 1))

sequence_array = np.arange(10)
print(sequence_array)
print(sequence_array.dtype, sequence_array.shape)

zero_array = np.zeros((3, 2), dtype = "int32")
print(zero_array)
print(zero_array.dtype, zero_array.shape)

one_array = np.ones((3, 2))
print(one_array)
print(one_array.dtype, one_array.shape)

array1 = np.arange(10)
print("array1:\n", array1)

array2 = array1.reshape(2, 5)
print("array2:\n", array2)

array3 = array1.reshape(5, 2)
print("array3:\n", array3)

array1 = np.arange(10)
print(array1)

array2 = array1.reshape(-1, 5)
print("array2 shape:", array2.shape)
print("array2:\n",array2)

array3 = array1.reshape(5, -1)
print("array3 shape:", array3.shape)
print("array3:\n", array3)

# reshape()는 (-1, 1), (-1, 1)와 같은 형태로 주로 사용됨
# 1차원 ndarray를 2차원으로 또는 2차원 ndarray를 1차원으로 변환시 사용
array1 = np.arange(5)

array2d_1 = array1.reshape(-1, 1)
print("array2d_1 shape:", array2d_1.shape)
print("array2d_1:\n", array2d_1)

array1d = array2d_1.reshape(-1,) #array2d_1.flatten()
print("array1d shape:", array1d.shape)
print("array1d:\n", array1d)

array1 = np.arange(start = 1, stop = 10)
print("array1 : ", array1)

value = array1[2]
print("value : ", value)
print(type(value))
print("맨 뒤의 값 : {:0}, 맨 뒤에서 두번째 값 : {:1}".format(array1[-1], array1[-2]))

array1[0] = 9
array1[8] = 0
print("array1:", array1)

array1d = np.arange(1, 10)
array2d = array1d.reshape(-1, 3)
print(array2d)

print("(row = 0, col = 0) index 가리키는 값:", array2d[0, 0])
print("(row = 0, col = 1) index 가리키는 값:", array2d[0, 1])
print("(row = 1, col = 0) index 가리키는 값:", array2d[1, 0])
print("(row = 2, col = 2) index 가리키는 값:", array2d[2, 2])


array1 = np.arange(1, 10)
print(array1)
array3 = array1[0:3]
print(array3)
print(type(array3))

array1 = np.arange(1, 10)
array4 = array1[:3]
print(array4)

array5 = array1[3:]
print(array5)

array6 = array1[:]
print(array6)

array1d = np.arange(1, 10)
array2d = array1d.reshape(3, 3)
print("array2d:\n",array2d)

print("array2d[0:2, 0:2] \n", array2d[0:2, 0:2])
print("array2d[0:2, 0:2] \n", array2d[1:3, 0:3])
print("array2d[0:2, 0:2] \n", array2d[1:3, :])
print("array2d[0:2, 0:2] \n", array2d[:, :])
print("array2d[0:2, 0:2] \n", array2d[:2, 1:])
print("array2d[0:2, 0:2] \n", array2d[:2, 0])

array1d = np.arange(1, 10)
array2d = array1d.reshape(3, 3)
print(array2d)

array3 = array2d[[0, 1], 2]
print("array2d[[0, 1], 2] => ", array3.tolist())

array4 = array2d[[0, 2], 0:2]
print("array2d[[0, 2], 0:2] => ", array4.tolist())

array5 = array2d[[0, 1]]
print("array2d[[0, 1]] => ", array5.tolist())

array1d = np.arange(1, 10)
print(array1d)

print(array1d > 5)
var1 = array1d > 5
print("var1:", var1)
print(type(var1))

array3 = array1d[array1d > 5]
print("array1d > 5 불린 인덱싱 결과 값 : ", array3)

boolean_indexes = np.array([False, False, False, False, False,  True,  True,  True,  True])
array3 = array1d[boolean_indexes]
print("array1d > 5 불린 인덱싱 결과 값 : ", array3)

indexes = np.array([5, 6, 7, 8])
array4 = array1d[indexes]
print("일반 인덱스로 필터링 결과 : ", array4)

org_array = np.array([3, 1, 9, 5])
print("원본 행렬:", org_array)

sort_array1 = np.sort(org_array)
print("np.sort() 호출 후 반환된 정렬 행렬:", sort_array1)
print("np.sort() 호출 후 원본 행렬: ", org_array)

sort_array2 = org_array.sort()
org_array.sort()
print("org_array.sort() 호출 후 반환된 행렬:", sort_array2)
print("org_array.sort() 호출 후 원본 행렬:", org_array)

sort_array1_desc = np.sort(org_array)[::-1]
print("내림차순으로 정렬:", sort_array1_desc)

array2d = np.array([[8, 12], [7, 1]])
sort_array2d_axis0 = np.sort(array2d, axis = 0)
print("row 방향으로 정렬:\n", sort_array2d_axis0)
sort_array2d_axis1 = np.sort(array2d, axis = 1)
print("column 방향으로 정렬:\n", sort_array2d_axis1)

org_array = np.array([3, 1, 9, 5])
print(np.sort(org_array))

sort_indices = np.argsort(org_array)
print(type(sort_indices))
print("행렬 정렬 시 원본 행렬의 인덱스:", sort_indices)

print(np.sort(org_array)[::-1])

sort_indices_desc = np.argsort(org_array)[::-1]
print("행렬 내림차순 정렬시 원본 행렬의 인덱스:", sort_indices_desc)

name_array = np.array(["John", "Mike", "Sarah", "Kate", "Samuel"])
score_array = np.array([78, 95, 84, 98, 88])

sort_indices = np.argsort(score_array)
print("sort indices:", sort_indices)
name_array_sort = name_array[sort_indices]
score_array_sort = score_array[sort_indices]
print(name_array_sort)
print(score_array_sort)

A = np.array([[1, 2, 3], [4, 5, 6]])
B = np.array([[7, 8],[9, 10], [11, 12]])

dot_product = np.dot(A, B)
print("행렬 내적 결과:\n", dot_product)

A = np.array([[1, 2], [3, 4]])
transpose_mat = np.transpose(A) #A.T
print("A의 전치 행렬:\n", transpose_mat)


